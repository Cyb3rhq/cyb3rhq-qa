'''
copyright: Copyright (C) 2015-2022, Cyb3rhq Inc.

           Created by Cyb3rhq, Inc. <info@cyb3rhq.com>.

           This program is free software; you can redistribute it and/or modify it under the terms of GPLv2

type: integration

brief: The 'cyb3rhq-logcollector' daemon monitors configured files and commands for new log messages.
       Specifically, these tests will check if the logcollector updates the 'cyb3rhq-logcollector.state'
       file when using the macOS unified logging system (ULS). Log data collection is the real-time
       process of making sense out of the records generated by servers or devices. This component can
       receive logs through text files or Windows event logs. It can also directly receive logs via
       remote syslog which is useful for firewalls and other such devices.

components:
    - logcollector

suite: statistics

targets:
    - agent

daemons:
    - cyb3rhq-logcollector

os_platform:
    - macos

os_version:
    - macOS Catalina
    - macOS Server

references:
    - https://documentation.cyb3rhq.com/current/user-manual/capabilities/log-data-collection/index.html
    - https://documentation.cyb3rhq.com/current/user-manual/reference/ossec-conf/localfile.html
    - https://documentation.cyb3rhq.com/current/user-manual/reference/statistics-files/cyb3rhq-logcollector-state.html
    - https://documentation.cyb3rhq.com/current/user-manual/reference/internal-options.html#logcollector

tags:
    - logcollector_statistics
'''
import os
import pytest

from cyb3rhq_testing.tools.configuration import load_cyb3rhq_configurations
from cyb3rhq_testing.tools import LOGCOLLECTOR_STATISTICS_FILE
from cyb3rhq_testing.tools.file import read_json
from cyb3rhq_testing import logcollector

# Marks
pytestmark = [pytest.mark.darwin, pytest.mark.tier(level=1)]

# Configuration
logcollector_stats_file_tout = 30
test_data_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'data')
configurations_path = os.path.join(test_data_path, 'cyb3rhq_statistics_macos.yaml')

parameters = [
    {'LOCATION': 'macos', 'LOG_FORMAT': 'macos'},
]

metadata = [
    {'location': 'macos', 'log_format': 'macos'}
]

# Configuration data
configurations = load_cyb3rhq_configurations(configurations_path, __name__, params=parameters, metadata=metadata)
configuration_ids = [f"{x['LOCATION']}_{x['LOG_FORMAT']}" for x in parameters]

local_internal_options = {'logcollector.state_interval': 1}

daemons_handler_configuration = {'daemons': ['cyb3rhq-logcollector', 'cyb3rhq-agentd', 'cyb3rhq-execd'],
                                 'ignore_errors': False}


@pytest.fixture(scope='module', params=configurations, ids=configuration_ids)
def get_configuration(request):
    """Get configurations from the module."""
    return request.param


def test_options_state_interval_no_file(configure_local_internal_options_module, get_configuration,
                                        configure_environment, daemons_handler_module):
    '''
    description: Check if the 'cyb3rhq-logcollector' daemon updates the statistic file 'cyb3rhq-logcollector.state'
                 when using the macOS unified logging system (ULS). For this purpose, the test will configure
                 a 'localfile' section using the macOS settings. Once the logcollector is started, it will check
                 if the 'cyb3rhq-logcollector.state' file has been created. Finally, the test will verify that the
                 'cyb3rhq-logcollector.state' has the 'macos' value in its 'location' tag of the 'global' and
                 'interval' sections.

    cyb3rhq_min_version: 4.2.0

    tier: 1

    parameters:
        - configure_local_internal_options_module:
            type: fixture
            brief: Set internal configuration for testing.
        - get_configuration:
            type: fixture
            brief: Get configurations from the module.
        - configure_environment:
            type: fixture
            brief: Configure a custom environment for testing.
        - daemons_handler_module:
            type: fixture
            brief: Handler of Cyb3rhq daemons.

    assertions:
        - Verify that the logcollector creates the 'cyb3rhq-logcollector.state' file.
        - Verify that the 'macos' value is in the 'location' tag in the 'global' and 'interval' sections
          of the 'cyb3rhq-logcollector.state' file.

    input_description: A configuration template (test_statistics_macos) is contained in an external YAML file
                       (cyb3rhq_statistics_macos.yaml). That template is combined with a test case defined in
                       the module. Those include configuration settings for the 'cyb3rhq-logcollector' daemon.

    expected_output:
        - The content of the 'cyb3rhq-logcollector.state' file.

    tags:
        - stats_file
    '''
    # Ensure cyb3rhq-logcollector.state is created
    logcollector.wait_statistics_file(timeout=logcollector_stats_file_tout)

    data = read_json(LOGCOLLECTOR_STATISTICS_FILE)

    global_files = data['global']['files']
    interval_files = data['interval']['files']

    assert list(filter(lambda global_file: global_file['location'] == 'macos', global_files))
    assert list(filter(lambda interval_file: interval_file['location'] == 'macos', interval_files))
